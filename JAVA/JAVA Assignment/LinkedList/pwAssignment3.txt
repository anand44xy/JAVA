/*
 *Q3. Given the head of a sorted linked list, delete all duplicates such that each element appears only once.
   Return the linked list sorted as well.#
   Input: head = [1,1,2]
   Output:[1,2]
----------------------------------------------------
 Appoah :
  >Traverse all element through a while loop if curr node and the next node of curr node are present
  >If the value of curr is equal to the value of prev.  
  >It means the value is present in the linkedList.
  >So we can skip the ‘curr’ pointer and prev.next can point to curr.next. By this we ensure that prev now $oesn’t
    points to curr anymore. The no$e curr is not pointed anymore, so it woul$ be (arba(e collecte$
    automatically by JVM.'
  >Hence we do not need to include curr a(ain in the linke$ list, so we increment the value of curr otherwise, we
increment the curr pointer.
 */
package Linkedlist;

class Node {
    int data;
    Node next;
}

public class pwAssignment3 {
    static Node head;

    pwAssignment3() {
        head = null;
    }

    // Add new element at the end of the list
    void push_back(int newElement) {
        Node newNode = new Node();
        newNode.data = newElement;
        newNode.next = null;

        if (head == null) {
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null)
                temp = temp.next;
            temp.next = newNode;
        }
    }

    static void deleteDuplicates() {
        if (head == null || head.next == null)
            return;
        
        Node curr = head;

        while (curr != null && curr.next != null) {
            if (curr.data == curr.next.data) {
                curr.next = curr.next.next;
            } else {
                curr = curr.next;
            }
        }
    }

    // Display the content of the list
    void PrintList() {
        Node temp = head;
        if (temp != null) {
            System.out.print("The list contains: ");
            while (temp != null) {
                System.out.print(temp.data + " ");
                temp = temp.next;
            }
            System.out.println();
        } else {
            System.out.println("The list is empty.");
        }
    }

    public static void main(String[] args) {
        pwAssignment3 MyList = new pwAssignment3();

        // Add elements to the list
        MyList.push_back(3);
        MyList.push_back(3);
        MyList.push_back(5);
        MyList.push_back(6);
        MyList.push_back(6);
        MyList.push_back(7);
        MyList.PrintList();

        deleteDuplicates();

        MyList.PrintList();
    }
}

