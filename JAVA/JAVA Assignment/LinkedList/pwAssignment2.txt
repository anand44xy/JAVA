/*
    Q2. Insert a node at the given position in a linked list. We are given a pointer to a node, and the new node is
    inserted after the given node.
    Input: LL = 1 -> 2 -> 4 -> 5 -> 6 pointer = 2 Oalue = 3.
    Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6
 ---------------------------------------------------------------------
Approach: 

To insert a node after a given node in a Linked List, we need to:

Check if the given node exists or not. 
 >If it do not exists, 
   >terminate the process.
>If the given node exists,
 >Make the element to be inserted as a new node
 >Change the next pointer of given node to the new node
 >Now shift the original next pointer of given node to the next pointer of new node
------------------------------------------------------------------------
Follow the below steps for inserting a node after a given node:

>Firstly, check if the given previous node is NULL or not.
>Then, allocate a new node (say temp) and
>Assign the data to temp.
>And then make the next of temp as the next of the previous node. 
>Finally, move the next of the previous node to point to temp.
*/



// Java program to show inserting a node
// after a given node in given Linked List


// A linked list node
class Node {
	int data;
	Node next;
}

// Class to insert elements in LL
class pwAssignment2 {
	Node head; // head of list

	// Given a node prev_node, insert a new
	// node after the given prev_node
	void insertAfter(Node prev_node, int new_data)
	{
		// 1. check if the given prev_node
		// is NULL
		if (prev_node == null) {
			System.out.println(
				"The given previous node cannot be NULL");
			return;
		}

		// 2. allocate new node
		Node new_node = new Node();

		// 3. put in the data
		new_node.data = new_data;

		// 4. Make next of new node
		// as next of prev_node
		new_node.next = prev_node.next;

		// 5. move the next of prev_node
		// as new_node
		prev_node.next = new_node;
	}

	// Function to insert element in LL
	void push(int new_data)
	{
		Node new_node = new Node();
		new_node.data = new_data;
		new_node.next = head;
		head = new_node;
	}

	// This function prints contents of
	// linked list starting from head
	void printList()
	{
		Node node = head;
		while (node != null) {
			System.out.print(" " + node.data);
			node = node.next;
		}
		System.out.println();
	}

	// Driver code
	public static void main(String[] args)
	{
		// Start with the empty list
		pwAssignment2 llist = new pwAssignment2();

		llist.push(6);
		llist.push(5);
		llist.push(4);
		llist.push(3);
		llist.push(2);

		System.out.print("Created Linked list is: ");
		llist.printList();

		// Insert 1 at the beginning.
		llist.insertAfter(llist.head, 1);

		System.out.print("After inserting 1 after 2: ");
		llist.printList();
	}
}
