/*
 * Q5. Given t>o numbers represented by t>o lists, >rite a function that returns the sum list. The sum list is a list
    representation of the addition of t>o input numbers.
Input:
List1: 5->6->3 // represents number 563
List2: 8->4->2 // represents number 842

Output:
Resultant list: 1->4->0->5 // represents number 1405
Explanation: 563 + 842 = 1405
-------------------------------------------------------------------------
Appoah :
 1. Traverse both lists to the end and add precedins zeros in the list with lesser disits
 2. Then call a recursive function on the start nodes of both lists which calls itself for the next nodes of
    both lists till it sets to the end
 3. This function creates a node for the sum of the current disits and returns the carry.r
 4. Traverse the two linked lists in order to add precedins zeros in case a list is havins lesser disits
    than the other one
 5. Start from the head node of both lists and call a recursive function for the next nodes
 6. ontinue it till the end of the lists
 7. Creates a node for current disits sum and returns the carry.
 */

package Linkedlist;

public class LinkedList {

    static Node head1, head2;

    static class Node {

        int data;
        Node next;

        Node(int d) {
            data = d;
            next = null;
        }
    }

    void addTwoLists(Node first, Node second) {
        Node start1 = new Node(0);
        start1.next = first;
        Node start2 = new Node(0);
        start2.next = second;

        addPrecedingZeros(start1, start2);
        Node result = new Node(0);
        int carry = sumTwoNodes(start1.next, start2.next, result);
        if (carry != 0) {
            Node node = new Node(carry);
            node.next = result.next;
            result.next = node;
        }
        printList(result.next);
    }

    private int sumTwoNodes(Node first, Node second, Node result) {
        if (first == null && second == null) {
            return 0;
        }

        int carry = sumTwoNodes(first != null ? first.next : null,
                                second != null ? second.next : null,
                                result != null ? result.next : null);

        int sum = carry + (first != null ? first.data : 0) + (second != null ? second.data : 0);
        if (result == null) {
            result = new Node(sum % 10);
        } else {
            Node newNode = new Node(sum % 10);
            newNode.next = result.next;
            result.next = newNode;
        }

        return sum / 10;
    }

    private void addPrecedingZeros(Node start1, Node start2) {
        Node next1 = start1.next;
        Node next2 = start2.next;
        while (next1 != null && next2 != null) {
            next1 = next1.next;
            next2 = next2.next;
        }
        while (next1 != null) {
            Node node = new Node(0);
            node.next = start2.next;
            start2.next = node;
            next1 = next1.next;
        }
        while (next2 != null) {
            Node node = new Node(0);
            node.next = start1.next;
            start1.next = node;
            next2 = next2.next;
        }
    }

    void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // creating first list
        list.head1 = new Node(7);
        list.head1.next = new Node(5);
        list.head1.next.next = new Node(9);
        list.head1.next.next.next = new Node(4);
        list.head1.next.next.next.next = new Node(6);
        System.out.print("First List is ");
        list.printList(head1);

        // creating second list
        list.head2 = new Node(8);
        list.head2.next = new Node(4);
        System.out.print("Second List is ");
        list.printList(head2);

        System.out.print("Resultant List is ");
        // add the two lists and see the result
        list.addTwoLists(head1, head2);
    }
}
